import{p as o}from"./index-Cjug_FY0.js";class c{constructor(){this.subscriptions=new Map,this.callbacks=new Map}subscribeToUserSubmissions(s,r){this.subscriptions.has(s)&&this.unsubscribeFromUserSubmissions(s);try{const e=o.pb.collection("submissions").subscribe("*",i=>{i.record.user===s&&(console.log("User submission updated:",i),this.handleSubmissionUpdate(s,i))});this.subscriptions.set(s,e),this.callbacks.set(s,r),console.log(`Subscribed to submissions for user: ${s}`)}catch(e){console.error("Error subscribing to submissions:",e)}}unsubscribeFromUserSubmissions(s){const r=this.subscriptions.get(s);if(r)try{r.unsubscribe(),this.subscriptions.delete(s),this.callbacks.delete(s),console.log(`Unsubscribed from submissions for user: ${s}`)}catch(e){console.error("Error unsubscribing from submissions:",e)}}handleSubmissionUpdate(s,r){const e=this.callbacks.get(s);e&&this.debounceCallback(s,e,r)}debounceCallback(s,r,e){this.debounceTimers.has(s)&&clearTimeout(this.debounceTimers.get(s));const i=setTimeout(()=>{r(e)},500);this.debounceTimers.set(s,i)}subscribeToLeaderboardUpdates(s){try{const r=o.pb.collection("submissions").subscribe("*",e=>{console.log("Leaderboard update triggered:",e),this.debounceCallback("leaderboard",s,e)});this.subscriptions.set("leaderboard",r),this.callbacks.set("leaderboard",s),console.log("Subscribed to leaderboard updates")}catch(r){console.error("Error subscribing to leaderboard updates:",r)}}unsubscribeFromLeaderboardUpdates(){this.unsubscribeFromUserSubmissions("leaderboard")}cleanup(){for(const[s,r]of this.subscriptions)try{r.unsubscribe()}catch(e){console.error(`Error cleaning up subscription for ${s}:`,e)}this.subscriptions.clear(),this.callbacks.clear();for(const s of this.debounceTimers.values())clearTimeout(s);this.debounceTimers.clear()}debounceTimers=new Map}const n=new c;export{n as r};
